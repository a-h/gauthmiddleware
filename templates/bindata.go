// Code generated by go-bindata.
// sources:
// templates/footer.html
// templates/header.html
// templates/login.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\xaa\xad\xe5\xb2\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x4e\xcd\x4b\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x5f\x49\xf7\x01\x2c\x00\x00\x00")

func templatesFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFooterHtml,
		"templates/footer.html",
	)
}

func templatesFooterHtml() (*asset, error) {
	bytes, err := templatesFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/footer.html", size: 44, mode: os.FileMode(420), modTime: time.Unix(1528059324, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x41\x8f\xd3\x3e\x10\xc5\xef\xf9\x14\xb3\x3e\xff\x6d\xeb\xdf\x15\x17\x94\x54\x82\x5d\x84\x38\x81\x04\x17\x4e\xc8\xb5\x27\xcd\x04\xc7\x0e\x9e\xe9\x96\x2a\xca\x77\x47\x49\xb7\xb4\x20\x24\x6e\x9c\x92\x19\x8d\x7f\xf3\xf4\xde\x4c\x53\xc0\x96\x12\x82\xea\xd0\x05\x2c\x6a\x9e\xab\xfa\xee\xf1\xfd\xc3\xa7\xcf\x1f\xde\x40\x27\x43\xdc\x56\xf5\xf2\x81\xe8\xd2\xbe\x51\x98\xd4\xb6\x02\xa8\x97\xe9\xe5\x07\xa0\x1e\x50\x1c\x24\x37\x60\xa3\x9e\x08\x8f\x63\x2e\xa2\xc0\xe7\x24\x98\xa4\x51\x47\x0a\xd2\x35\x01\x9f\xc8\xa3\x5e\x8b\xff\x80\x12\x09\xb9\xa8\xd9\xbb\x88\xcd\xff\x6a\x5b\x9d\x49\xec\x0b\x8d\x02\x5c\x7c\xa3\x3a\x91\x91\x5f\x5a\xeb\x7a\xf7\xdd\xec\x73\xde\x47\x74\x23\xb1\xf1\x79\x58\x7b\x36\xd2\x8e\x6d\xff\xed\x80\xe5\x64\x37\x66\x63\x36\xcf\x85\x19\x28\x99\x9e\xd5\xb6\xb6\x67\xde\x85\x7e\xa7\x35\xbc\xce\x59\x58\x8a\x1b\x41\xeb\x67\xf9\x91\xd2\x57\x28\x18\x1b\xc5\x72\x8a\xc8\x1d\xa2\x28\xe8\x0a\xb6\x57\x11\x3e\xa4\x9e\x8d\x8f\xf9\x10\xda\xe8\x0a\xfe\xa6\x42\x8e\x24\x82\x45\xef\x2e\x74\x7b\x6f\xee\xcd\x0b\xeb\x99\xed\xcf\xde\xaa\xcb\x33\xab\x7f\xbc\x57\x4b\x87\x03\xde\x6c\xbf\xba\xf1\x91\xf6\x09\x28\x5d\xbd\xb8\x89\xf2\x6c\xb9\x66\xda\x27\x4a\x9a\x7d\x1e\xf1\x26\xd5\xb1\xe4\x96\x22\x02\x0e\x8e\xa2\xfa\xdb\x6b\x1f\x09\x93\x7c\xa1\x70\x43\x98\x26\xf3\x76\x1d\x7a\x75\x90\xee\x61\x1d\x78\xf7\x38\xcf\x17\xd6\x1f\x4f\x61\xc9\xff\x4c\x5e\x8d\xe8\xd9\x8e\xd1\x49\x9b\xcb\xb0\x04\x0e\x8e\x4f\xc9\x43\xc0\x16\xcb\xaf\xe1\xd7\xf6\x72\xae\xf5\x2e\x87\xd3\xb6\x9a\x26\x4c\x61\x9e\xab\x1f\x01\x00\x00\xff\xff\xeb\xd7\x5f\x2c\xfe\x02\x00\x00")

func templatesHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderHtml,
		"templates/header.html",
	)
}

func templatesHeaderHtml() (*asset, error) {
	bytes, err := templatesHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.html", size: 766, mode: os.FileMode(420), modTime: time.Unix(1528206105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x92\x41\x8f\x9b\x40\x0c\x85\xef\xf9\x15\x96\xdb\x03\x1c\x16\xa4\x5c\x0b\x48\x7b\xaa\x2a\xf5\xd4\x6a\xcf\xab\xe9\x8c\x03\xa3\x80\x3d\x9a\x31\x48\x51\xc4\x7f\xaf\x48\x33\x04\xf5\x68\xfb\x7b\xcf\xe6\x31\xf7\xbb\xd2\x14\x46\xa3\x04\x38\x90\x71\x14\x11\x2a\x58\xd7\x13\x00\x40\xe3\xfc\x02\x76\x34\x29\xb5\x68\x85\xd5\x78\xa6\x88\xdd\x63\x06\xd0\x0c\xe7\xee\xa7\xf4\x9e\x9b\x7a\x38\x77\xa7\xdc\x0d\x59\x31\x92\x71\xd8\x7d\x24\x82\x9b\xcc\x11\xbe\x8b\xf4\x23\xc1\xbb\xb5\x32\xb3\x36\x75\x78\x49\x0e\x6b\xfa\xb7\xe4\x7b\xf6\x7c\x46\x70\x46\xcd\x9b\x70\x9a\xad\xa5\x6d\x24\xfc\xdb\xf7\xfc\x83\x9f\x13\x1d\x68\xa2\x16\x9d\x89\x57\xec\x9a\xda\xf9\xe5\x65\x98\x6c\xf4\x41\xf3\xa1\x00\x97\x99\xad\x7a\x61\xc8\x1e\x45\xff\xb8\xe6\x23\x51\x2c\xe1\xbe\x73\x00\x8b\x89\xe0\xdd\xa7\xca\x95\x18\x5a\x78\x61\x55\x4f\xfa\x3e\xeb\xf0\x8b\x52\x10\x4e\x54\x94\x55\xe6\xbe\x1d\xf4\x5f\x0b\xfc\x92\xfb\x58\x56\x8b\x19\x8b\x5c\x96\xff\x73\xe3\x16\xde\xe7\x45\xe2\x84\x65\x95\xe6\x3f\x93\xd7\xa2\xdc\x99\x35\xe3\x4d\x9d\x3f\x27\x37\x36\x09\x78\xd7\xe2\xc1\x01\x26\xd2\x41\x5c\x8b\x41\x92\x62\x77\x58\xd5\x78\x0e\xb3\x82\xde\x02\xb5\x38\x78\xe7\x88\xf1\xa1\xde\xef\x04\x36\x5b\x94\x7b\x5d\xef\xbf\xb8\xde\xbc\xff\x55\xcf\x88\x8f\x0f\xe6\x22\xa2\x14\x71\x5d\x4f\x7f\x03\x00\x00\xff\xff\xa1\xf4\x67\xb1\x47\x02\x00\x00")

func templatesLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoginHtml,
		"templates/login.html",
	)
}

func templatesLoginHtml() (*asset, error) {
	bytes, err := templatesLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/login.html", size: 583, mode: os.FileMode(420), modTime: time.Unix(1528206088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/footer.html": templatesFooterHtml,
	"templates/header.html": templatesHeaderHtml,
	"templates/login.html": templatesLoginHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{templatesFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{templatesHeaderHtml, map[string]*bintree{}},
		"login.html": &bintree{templatesLoginHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

